{"name":"Has Pages","tagline":"Simple Engine to allow Rails app to have \"static\" pages rendered in a layout.","body":"### Simple Static Pages in Rails\r\nFor when you want to have some *static-ish* pages rendered with minimal configuration within the Rails stack, with sensible defaults including caching, asset pipeline, and nice URLs.\r\n\r\n### Requirements\r\n============\r\nRails 4\r\n\r\n### Installation\r\nPackaged as a gem, so the usual bundler procedure applies\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ gem 'has_pages', git: \"https://github.com/beautifulcode/has_pages.git\r\n$ bundle\r\n```\r\n\r\n### Example Use\r\n============\r\n\r\nYou have a set of semi static pages that should be served if no other routes are matched.\r\n\r\nFor example, given the following request `/about/company`, this will look in `app/views/pages/about/company`\r\n\r\nThe page will be rendered in the application layout by default, but will use an `about` layout if it exists.\r\n\r\nThis also provides page caching by default of these pages so Rails doesn't get involved on further requests to the same path.\r\n\r\nEventually, a macro of has_pages(options) can be called from your application controller to customize the behaviour of the plugin.\r\n\r\nSome macro options could include:\r\n\r\n  * Caching On/Off\r\n  * Cache Directory\r\n  * Alternate Layout(s)\r\n  * Path Prefix\r\n\r\n\r\nCopyright (c) 2015 Aaron Glenn, released under the MIT license","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}